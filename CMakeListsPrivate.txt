# !!! WARNING !!! AUTO-GENERATED FILE, PLEASE DO NOT MODIFY IT AND USE
# https://docs.platformio.org/page/projectconf/section_env_build.html#build-flags
#
# If you need to override existing CMake configuration or add extra,
# please create `CMakeListsUser.txt` in the root of project.
# The `CMakeListsUser.txt` will not be overwritten by PlatformIO.



set(CMAKE_CONFIGURATION_TYPES "pico" CACHE STRING "Build Types reflect PlatformIO Environments" FORCE)

# Convert "Home Directory" that may contain unescaped backslashes on Windows
file(TO_CMAKE_PATH $ENV{HOMEDRIVE}$ENV{HOMEPATH} ENV_HOME_PATH)

set(CLION_SVD_FILE_PATH "${ENV_HOME_PATH}/.platformio/platforms/raspberrypi/misc/svd/rp2040.svd" CACHE FILEPATH "Peripheral Registers Definitions File" FORCE)

SET(CMAKE_C_COMPILER "${ENV_HOME_PATH}/.platformio/packages/toolchain-gccarmnoneeabi/bin/arm-none-eabi-gcc.exe")
SET(CMAKE_CXX_COMPILER "${ENV_HOME_PATH}/.platformio/packages/toolchain-gccarmnoneeabi/bin/arm-none-eabi-g++.exe")
SET(CMAKE_CXX_FLAGS "-Wvla -fno-rtti -std=gnu++14 -DMBED_TRAP_ERRORS_ENABLED=1 -Os -Wall -Wextra -Wno-missing-field-initializers -Wno-unused-parameter -c -fdata-sections -ffunction-sections -fmessage-length=0 -fno-exceptions -fomit-frame-pointer -funsigned-char -mcpu=cortex-m0plus -mthumb -iprefix${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/cores/arduino @${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/variants/RASPBERRY_PI_PICO/includes.txt -nostdlib")
SET(CMAKE_C_FLAGS "-std=gnu11 -DMBED_TRAP_ERRORS_ENABLED=1 -Os -Wall -Wextra -Wno-missing-field-initializers -Wno-unused-parameter -c -fdata-sections -ffunction-sections -fmessage-length=0 -fno-exceptions -fomit-frame-pointer -funsigned-char -mcpu=cortex-m0plus -mthumb -iprefix${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/cores/arduino @${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/variants/RASPBERRY_PI_PICO/includes.txt -nostdlib")

SET(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 14)

if (CMAKE_BUILD_TYPE MATCHES "pico")
    add_definitions(-DPLATFORMIO=60107)
    add_definitions(-DARDUINO_RASPBERRY_PI_PICO)
    add_definitions(-DARDUINO_ARCH_RP2040)
    add_definitions(-DARM_MATH_CM0PLUS)
    add_definitions(-DCOMPONENT_FLASHIAP=1)
    add_definitions(-DDEVICE_ANALOGIN=1)
    add_definitions(-DDEVICE_FLASH=1)
    add_definitions(-DDEVICE_I2C=1)
    add_definitions(-DDEVICE_I2CSLAVE=1)
    add_definitions(-DDEVICE_INTERRUPTIN=1)
    add_definitions(-DDEVICE_PORT_IN=1)
    add_definitions(-DDEVICE_PORT_OUT=1)
    add_definitions(-DDEVICE_PWMOUT=1)
    add_definitions(-DDEVICE_RESET_REASON=1)
    add_definitions(-DDEVICE_RTC=1)
    add_definitions(-DDEVICE_SERIAL=1)
    add_definitions(-DDEVICE_SERIAL_FC=1)
    add_definitions(-DDEVICE_SPI=1)
    add_definitions(-DDEVICE_USBDEVICE=1)
    add_definitions(-DDEVICE_USTICKER=1)
    add_definitions(-DDEVICE_WATCHDOG=1)
    add_definitions(-DMBEDTLS_ENTROPY_NV_SEED)
    add_definitions(-DMBED_BUILD_TIMESTAMP=1670863580.9430058)
    add_definitions(-DMBED_MPU_CUSTOM)
    add_definitions(-DPICO_NO_BINARY_INFO=1)
    add_definitions(-DPICO_ON_DEVICE=1)
    add_definitions(-DPICO_RP2040_USB_DEVICE_ENUMERATION_FIX=1)
    add_definitions(-DPICO_TIME_DEFAULT_ALARM_POOL_DISABLED)
    add_definitions(-DPICO_UART_ENABLE_CRLF_SUPPORT=0)
    add_definitions(-DTARGET_CORTEX)
    add_definitions(-DTARGET_CORTEX_M)
    add_definitions(-DTARGET_LIKE_CORTEX_M0)
    add_definitions(-DTARGET_LIKE_MBED)
    add_definitions(-DTARGET_M0P)
    add_definitions(-DTARGET_NAME=RASPBERRY_PI_PICO)
    add_definitions(-DTARGET_RASPBERRYPI)
    add_definitions(-DTARGET_RASPBERRY_PI_PICO)
    add_definitions(-DTARGET_RELEASE)
    add_definitions(-DTARGET_RP2040)
    add_definitions(-DTARGET_memmap_default)
    add_definitions(-DTOOLCHAIN_GCC)
    add_definitions(-DTOOLCHAIN_GCC_ARM)
    add_definitions(-D__CMSIS_RTOS)
    add_definitions(-D__CORTEX_M0PLUS)
    add_definitions(-D__MBED_CMSIS_RTOS_CM)
    add_definitions(-D__MBED__=1)
    add_definitions(-DMBED_NO_GLOBAL_USING_DIRECTIVE=1)
    add_definitions(-DCORE_MAJOR=)
    add_definitions(-DCORE_MINOR=)
    add_definitions(-DCORE_PATCH=)
    add_definitions(-DUSE_ARDUINO_PINOUT)
    add_definitions(-DARDUINO=10810)
    add_definitions(-DARDUINO_ARCH_MBED)

    include_directories("${CMAKE_CURRENT_LIST_DIR}/include")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/cores/arduino")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/cores/arduino/api/deprecated")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/cores/arduino/api/deprecated-avr-comp")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/variants/RASPBERRY_PI_PICO")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/Camera/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/Ethernet/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/GC2145")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/GPS/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/GSM/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/Himax_HM01B0")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/Himax_HM0360")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/KernelDebug/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/MCUboot/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/MLC/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/MRI/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/NDP/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/Nano33BLE_System/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/Nicla_System/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/OV7670")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/PDM/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/Portenta_Audio/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/Portenta_SDCARD/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/Portenta_SDRAM/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/Portenta_Video/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/Portenta_lvgl/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/RPC/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/SE05X/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/SFU/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/SPI")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/STM32H747_System/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/Scheduler/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/SocketWrapper/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/ThreadDebug/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/USBAudio")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/USBHID/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/USBHOST/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/USBMIDI")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/USBMSD/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/WiFi/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/Wire")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/doom/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/ea_malloc")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/mbed-memory-status")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/openamp_arduino/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/rpclib/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/framework-arduino-mbed/libraries/syntiant_ilib/src")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/toolchain-gccarmnoneeabi/arm-none-eabi/include/c++/9.2.1")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/toolchain-gccarmnoneeabi/arm-none-eabi/include/c++/9.2.1/arm-none-eabi")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/toolchain-gccarmnoneeabi/lib/gcc/arm-none-eabi/9.2.1/include")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/toolchain-gccarmnoneeabi/lib/gcc/arm-none-eabi/9.2.1/include-fixed")
    include_directories("${ENV_HOME_PATH}/.platformio/packages/toolchain-gccarmnoneeabi/arm-none-eabi/include")

    FILE(GLOB_RECURSE EXTRA_LIB_SOURCES
        ${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/pico/*.*
    )
endif()


FILE(GLOB_RECURSE SRC_LIST
    ${CMAKE_CURRENT_LIST_DIR}/src/*.*
    ${CMAKE_CURRENT_LIST_DIR}/lib/*.*
    ${CMAKE_CURRENT_LIST_DIR}/test/*.*
)

list(APPEND SRC_LIST ${EXTRA_LIB_SOURCES})
